首先非常荣幸能有这个机会和各位大佬合作，说是合作其实也是大佬的单方面带飞，我只是给这个完美的代码添加一点屎山
我也是第一次参与这种项目，原谅我垄长的代码接口有些复杂短日难以理解和寻找对外接口，本身也是学习阶段，所以没能对接上项目，只提供一个功能




本段代码如题是做出3dcube,考虑到是2d的游戏，其实也不知道如何真的3d建模，所以采取了伪3d的2d投影方法，通过给一个边长生成和复制立方体并可以移动和旋转立方体块的功能

至于为什么想出3d，大概是因为我觉得在2d的游戏中突然出现3d会非常炫酷，特别是只有正方形边框的时候简直太酷了！黑客帝国有没有。大概？而且如果游戏中用不到也许当玩家获取一个新的方块时可以调用这个来给玩家可旋转的观察一下这个立方体，或者说创造一个彩蛋空间使玩家“意外进入”3d空间而且只有3d线条等等（可能只是我没有办法实现给每个面上材质）


float sideLength = 20.0f;  给与边长
 Point3D base[4] = {
     {-sideLength / 2, -sideLength / 2, 0},
     {sideLength / 2, -sideLength / 2, 0},
     {sideLength / 2, sideLength / 2, 0},
     {-sideLength / 2, sideLength / 2, 0}
 };


创建底平面


 float gap = 0.f; // 偏移量设 每个正方体之间的间隔
 Cube originalCube(base, sideLength);创建一个正方体
 std::vector<Cube> cubes = originalCube.cubeCopyZ(originalCube, 1, 1, 1, sideLength, gap); //  在x,y方向上复制正方体，可以改个数，分别是层、行、列
float angleX = 0.0f;
float angleY = 0.0f;
float angleZ = 0.0f              角度初始化
float focalLength = 500.0f;  焦距，注数值过大或者过小会变形出bug原因未知（能力有限）



另外，getposition函数将返回左后上顶面的点坐标，之所以只返回一个，是我感觉这是一个规则的正方体，其余点的位置比较好计算，因此只返回一个点的坐标位置，时间有限暂时没有写出如果还有人续写这里的话
最后非常感谢你的阅读，也非常感谢能有这次机会，谢谢大家！